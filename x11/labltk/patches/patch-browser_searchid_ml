revert the following commits for ocaml-4.12.1,
  - commit 0e52cb81271236d904eaf18d26821d5df5e4234a (update ocamlbrowser for 4.14)
  - commit 2cbb92a8c0feacdd8ee69976f3f45a7cf81f805c (ready for ocaml 4.13)

Index: browser/searchid.ml
--- browser/searchid.ml.orig
+++ browser/searchid.ml
@@ -95,25 +95,27 @@ let rec arr p ~card:n =
   if p = 0 then 1 else n * arr (p-1) ~card:(n-1)
 
 let rec all_args ty =
-  match get_desc ty with
+  let ty = repr ty in
+  match ty.desc with
     Tarrow(l, ty1, ty2, _) -> let (tl,ty) = all_args ty2 in ((l,ty1)::tl, ty)
   | _ -> ([], ty)
 
 let rec equal ~prefix t1 t2 =
-  match get_desc t1, get_desc t2 with
+  match (repr t1).desc, (repr t2).desc with
     Tvar _, Tvar _ -> true
   | Tvariant row1, Tvariant row2 ->
-      let fields1 = filter_row_fields false (row_fields row1)
-      and fields2 = filter_row_fields false (row_fields row1)
+      let row1 = row_repr row1 and row2 = row_repr row2 in
+      let fields1 = filter_row_fields false row1.row_fields
+      and fields2 = filter_row_fields false row1.row_fields
       in
       let r1, r2, pairs = merge_row_fields fields1 fields2 in
-      row_closed row1 = row_closed row2 && r1 = [] && r2 = [] &&
+      row1.row_closed = row2.row_closed && r1 = [] && r2 = [] &&
       List.for_all pairs ~f:
            begin fun (_,f1,f2) ->
              match row_field_repr f1, row_field_repr f2 with
                Rpresent None, Rpresent None -> true
              | Rpresent(Some t1), Rpresent (Some t2) -> equal t1 t2 ~prefix
-             | Reither(c1, tl1, _), Reither(c2, tl2, _) ->
+             | Reither(c1, tl1, _, _), Reither(c2, tl2, _, _) ->
                  c1 = c2 && List.length tl1 = List.length tl2 &&
                  List.for_all2 tl1 tl2 ~f:(equal ~prefix)
              | _ -> false
@@ -141,11 +143,12 @@ let rec equal ~prefix t1 t2 =
 let get_options = List.filter ~f:Btype.is_optional
 
 let rec included ~prefix t1 t2 =
-  match get_desc t1, get_desc t2 with
+  match (repr t1).desc, (repr t2).desc with
     Tvar _, _ -> true
   | Tvariant row1, Tvariant row2 ->
-      let fields1 = filter_row_fields false (row_fields row1)
-      and fields2 = filter_row_fields false (row_fields row2)
+      let row1 = row_repr row1 and row2 = row_repr row2 in
+      let fields1 = filter_row_fields false row1.row_fields
+      and fields2 = filter_row_fields false row2.row_fields
       in
       let r1, r2, pairs = merge_row_fields fields1 fields2 in
       r1 = [] &&
@@ -154,7 +157,7 @@ let rec included ~prefix t1 t2 =
              match row_field_repr f1, row_field_repr f2 with
                Rpresent None, Rpresent None -> true
              | Rpresent(Some t1), Rpresent (Some t2) -> included t1 t2 ~prefix
-             | Reither(c1, tl1, _), Reither(c2, tl2, _) ->
+             | Reither(c1, tl1, _, _), Reither(c2, tl2, _, _) ->
                  c1 = c2 && List.length tl1 = List.length tl2 &&
                  List.for_all2 tl1 tl2 ~f:(included ~prefix)
              | _ -> false
@@ -204,7 +207,7 @@ let mkpath = function
 let get_fields ~prefix ~sign self =
   (*let env = open_signature Fresh (mkpath prefix) sign !start_env in*)
   let env = add_signature sign !start_env in
-  match get_desc (expand_head env self) with
+  match (expand_head env self).desc with
     Tobject (ty_obj, _) ->
       let l,_ = flatten_fields ty_obj in l
   | _ -> []
@@ -232,7 +235,7 @@ let rec search_type_in_signature t ~sign ~prefix ~mode
           begin match td.type_kind with
             Type_abstract
 	  | Type_open -> false
-          | Type_variant (l, _) ->
+          | Type_variant l ->
             List.exists l ~f:
             begin fun {Types.cd_args=args; cd_res=r} ->
               constructor_matches args  ||
@@ -267,12 +270,12 @@ let rec search_type_in_signature t ~sign ~prefix ~mode
   end
 
 let search_all_types t ~mode =
-  let tl = match mode, get_desc t with
+  let tl = match mode, t.desc with
       `Exact, _ -> [t]
     | `Included, Tarrow _ -> [t]
     | `Included, _ ->
-      [t; newty(Tarrow(Nolabel,t,newvar(),commu_ok));
-          newty(Tarrow(Nolabel,newvar(),t,commu_ok))]
+      [t; newty(Tarrow(Nolabel,t,newvar(),Cok));
+          newty(Tarrow(Nolabel,newvar(),t,Cok))]
   in List2.flat_map !module_list ~f:
     begin fun modname ->
     let mlid = Lident modname in
@@ -424,7 +427,7 @@ let rec bound_variables pat =
   | Ppat_alias (pat,s) -> s.txt :: bound_variables pat
   | Ppat_tuple l -> List2.flat_map l ~f:bound_variables
   | Ppat_construct (_,None) -> []
-  | Ppat_construct (_,Some (_, pat)) -> bound_variables pat
+  | Ppat_construct (_,Some pat) -> bound_variables pat
   | Ppat_variant (_,None) -> []
   | Ppat_variant (_,Some pat) -> bound_variables pat
   | Ppat_record (l, _) ->
